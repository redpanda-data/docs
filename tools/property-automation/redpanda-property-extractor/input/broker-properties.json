{
    "properties": {
        "data_directory": {
            "description": "Path to the directory for storing Redpanda's streaming data files."
        },
        "admin": {
            "description": "IP address and port of the admin server."
        },
        "admin_api_doc_dir": {
            "description": "Path to the admin API documentation directory."
        },
        "admin_api_tls": {
            "description": "TLS configuration for the Admin API."
        },
        "advertised_kafka_api": {
            "description": "Addresses of Kafka API published to clients."
        },
        "advertised_rpc_api": {
            "description": "Address of the RPC endpoint published to other cluster members."
        },
        "cloud_storage_cache_directory": {
            "description": "The directory where the cache archive is stored. This property is mandatory when xref:./cluster-properties.adoc#cloud_storage_enabled[cloud_storage_enabled] is set to `true`."
        },
        "coproc_supervisor_server": {
            "description": "IP address and port for supervisor service."
        },
        "crash_loop_limit": {
            "description": "A limit on the number of consecutive times a broker can crash within one hour before its crash-tracking logic is reset. This limit prevents a broker from getting stuck in an infinite cycle of crashes.\n\nIf `null`, the property is disabled and no limit is applied.\n\nThe crash-tracking logic is reset (to zero consecutive crashes) by any of the following conditions:\n\n* The broker shuts down cleanly.\n* One hour passes since the last crash.\n* The broker configuration file, `redpanda.yaml`, is updated.\n* The `startup_log` file in the broker's <<data_directory,data_directory>> is manually deleted.\n\n*Units*: number of consecutive crashes of a broker"
        },
        "dashboard_dir": {
            "description": "Path to the directory where the HTTP dashboard is located."
        },
        "developer_mode": {
            "description": "CAUTION: Enabling `developer_mode` isn't recommended for production use.\n\nFlag to enable developer mode, which skips most of the checks performed at startup."
        },
        "empty_seed_starts_cluster": {
            "description": "Controls how a new cluster is formed. This property must have the same value in all brokers in a cluster.\n\nIf `true`, an empty <<seed_servers,seed_servers>> list denotes that this broker should form a cluster. At most, one broker in the cluster should be configured with an empty seed_servers list. If no such configured broker exists, or if configured to be `false`, then all brokers denoted by the seed_servers list must be identical in their configurations, and those brokers form the initial cluster.\n\nTIP: This is set to `true` by default for backward compatibility, but Redpanda recommends setting `empty_seed_starts_cluster` to `false`."
        },
        "kafka_api": {
            "description": "IP address and port of the Kafka API endpoint that handles requests."
        },
        "kafka_api_tls": {
            "description": "Transport Layer Security (TLS) configuration for the Kafka API endpoint."
        },
        "large_allocation_warning_threshold": {
            "description": "Enables log warning messages for memory allocations greater than the given threshold size, in bytes.\n\nIf set to `null`, the property is disabled, so no log messages are enabled.\n\nIf enabled, the log warnings are rate limited: the first warning will be for any allocation greater than or equal to the configured threshold, then for every subsequent warning the threshold is increased by 1.618x the current threshold.\n\n*Units*: bytes per memory allocation"
        },
        "node_id": {
            "description": "A number that uniquely identifies the broker within the cluster. If `null` (the default value), Redpanda automatically assigns an ID. If set, it must be non-negative value.\n\nCAUTION: The `node_id` property must not be changed after a broker joins the cluster.\n\n\n*Range*: [0, ...]"
        },
        "rack": {
            "description": "A label that identifies a failure zone. Apply the same label to all brokers in the same failure zone. When xref:./cluster-properties.adoc#enable_rack_awareness[enable_rack_awareness] is set to `true` at the cluster level, the system uses the rack labels to spread partition replicas across different failure zones."
        },
        "recovery_mode_enabled": {
            "description": "If `true`, start Redpanda in xref:manage:recovery-mode.adoc[recovery mode], where user partitions are not loaded and only administrative operations are allowed."
        },
        "rpc_server": {
            "description": "IP address and port for the Remote Procedure Call (RPC) server."
        },
        "rpc_server_tls": {
            "description": "TLS configuration for the RPC server."
        }
    }
}